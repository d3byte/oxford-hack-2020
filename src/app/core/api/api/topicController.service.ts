/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CreateTopicRq } from '../model/createTopicRq';
import { TopicVO } from '../model/topicVO';
import { TopicWithoutVerbVO } from '../model/topicWithoutVerbVO';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class TopicControllerService {
  protected basePath = '//localhost:8080/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * createTopic
   *
   * @param body topicCreateRq
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createTopicUsingPOST(body: CreateTopicRq, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public createTopicUsingPOST(body: CreateTopicRq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public createTopicUsingPOST(body: CreateTopicRq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public createTopicUsingPOST(body: CreateTopicRq, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createTopicUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TopicVO>('post', `${this.basePath}/topic`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * deleteTopic
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteTopicUsingDELETE(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteTopicUsingDELETE(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteTopicUsingDELETE(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteTopicUsingDELETE(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteTopicUsingDELETE.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/topic/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * fixedTopic
   *
   * @param fixed fixed
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public fixedTopicUsingPOST(fixed: boolean, id: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public fixedTopicUsingPOST(fixed: boolean, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public fixedTopicUsingPOST(fixed: boolean, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public fixedTopicUsingPOST(fixed: boolean, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (fixed === null || fixed === undefined) {
      throw new Error('Required parameter fixed was null or undefined when calling fixedTopicUsingPOST.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling fixedTopicUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>('post', `${this.basePath}/topic/${encodeURIComponent(String(id))}/fixed/${encodeURIComponent(String(fixed))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * getFixedTopics
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFixedTopicsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TopicWithoutVerbVO>>;
  public getFixedTopicsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TopicWithoutVerbVO>>>;
  public getFixedTopicsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TopicWithoutVerbVO>>>;
  public getFixedTopicsUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<TopicWithoutVerbVO>>('get', `${this.basePath}/topics/fixed`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * getTopicById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTopicByIdUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public getTopicByIdUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public getTopicByIdUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public getTopicByIdUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getTopicByIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>('get', `${this.basePath}/topic/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * getTopics
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTopicsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TopicVO>>;
  public getTopicsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TopicVO>>>;
  public getTopicsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TopicVO>>>;
  public getTopicsUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<TopicVO>>('get', `${this.basePath}/topics`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * updateTopicAddons
   *
   * @param addonId addonId
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTopicAddonsUsingPUT(addonId: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public updateTopicAddonsUsingPUT(addonId: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public updateTopicAddonsUsingPUT(addonId: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public updateTopicAddonsUsingPUT(addonId: string, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (addonId === null || addonId === undefined) {
      throw new Error('Required parameter addonId was null or undefined when calling updateTopicAddonsUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTopicAddonsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>('put', `${this.basePath}/topic/${encodeURIComponent(String(id))}/addon/${encodeURIComponent(String(addonId))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * updateTopicExtensions
   *
   * @param extensionId extensionId
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTopicExtensionsUsingPUT(extensionId: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public updateTopicExtensionsUsingPUT(extensionId: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public updateTopicExtensionsUsingPUT(extensionId: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public updateTopicExtensionsUsingPUT(extensionId: string, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (extensionId === null || extensionId === undefined) {
      throw new Error('Required parameter extensionId was null or undefined when calling updateTopicExtensionsUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTopicExtensionsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>(
      'put',
      `${this.basePath}/topic/${encodeURIComponent(String(id))}/extension/${encodeURIComponent(String(extensionId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTopicReplacements
   *
   * @param id id
   * @param replacementId replacementId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTopicReplacementsUsingPUT(id: string, replacementId: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public updateTopicReplacementsUsingPUT(id: string, replacementId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public updateTopicReplacementsUsingPUT(id: string, replacementId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public updateTopicReplacementsUsingPUT(id: string, replacementId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTopicReplacementsUsingPUT.');
    }

    if (replacementId === null || replacementId === undefined) {
      throw new Error('Required parameter replacementId was null or undefined when calling updateTopicReplacementsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>(
      'put',
      `${this.basePath}/topic/${encodeURIComponent(String(id))}/replacement/${encodeURIComponent(String(replacementId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTopicSimplifications
   *
   * @param id id
   * @param simplificationId simplificationId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTopicSimplificationsUsingPUT(id: string, simplificationId: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public updateTopicSimplificationsUsingPUT(
    id: string,
    simplificationId: string,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<TopicVO>>;
  public updateTopicSimplificationsUsingPUT(id: string, simplificationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public updateTopicSimplificationsUsingPUT(id: string, simplificationId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTopicSimplificationsUsingPUT.');
    }

    if (simplificationId === null || simplificationId === undefined) {
      throw new Error('Required parameter simplificationId was null or undefined when calling updateTopicSimplificationsUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TopicVO>(
      'put',
      `${this.basePath}/topic/${encodeURIComponent(String(id))}/simplification/${encodeURIComponent(String(simplificationId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * updateTopic
   *
   * @param body topicUpdateRq
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTopicUsingPUT(body: CreateTopicRq, id: string, observe?: 'body', reportProgress?: boolean): Observable<TopicVO>;
  public updateTopicUsingPUT(body: CreateTopicRq, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopicVO>>;
  public updateTopicUsingPUT(body: CreateTopicRq, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopicVO>>;
  public updateTopicUsingPUT(body: CreateTopicRq, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateTopicUsingPUT.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateTopicUsingPUT.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TopicVO>('put', `${this.basePath}/topic/${encodeURIComponent(String(id))}`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
